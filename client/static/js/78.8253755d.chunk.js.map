{"version":3,"file":"static/js/78.8253755d.chunk.js","mappings":"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","sources":["app/modules/wizards/components/steps/Step1.tsx","app/modules/wizards/components/steps/Step3.tsx","app/modules/wizards/components/steps/Step6.tsx","app/modules/wizards/components/CreateAccountWizardHelper.ts","app/modules/wizards/components/Vertical.tsx","app/modules/wizards/components/steps/Step4.tsx","app/modules/wizards/components/CreateFieldInfo.ts","app/modules/wizards/components/Horizontal.tsx","app/modules/wizards/WizardsPage.tsx"],"sourcesContent":["/* eslint-disable jsx-a11y/anchor-is-valid */\nimport {FC} from 'react'\nimport {KTIcon} from '../../../../../_metronic/helpers'\nimport {ErrorMessage, Field} from 'formik'\n\nconst Step1: FC = () => {\n  return (\n    <div className='w-100'>\n\n        {/* <div className='fv-row mb-10'>\n        <label className='form-label required'>The job title you are applying for</label>\n\n        <Field name='jobTitle' className='form-control form-control-lg form-control-solid h-60px' />\n        <div className='text-danger mt-2'>\n          <ErrorMessage name='jobTitle' />\n        </div>\n      </div> */}\n\n       <div className='fv-row mb-10 mt-3'>\n        <label className='form-label'>Your resume </label>\n        <Field\n          as='textarea'\n          name='resume'\n          className='form-control form-control-lg form-control-solid'\n          rows={8}\n        ></Field>\n        <div className='text-danger mt-2'>\n          <ErrorMessage name='resume' />\n        </div>\n      </div>\n       <div className='fv-row mb-10 mt-3'>\n        <label className='form-label'>Job description </label>\n        <Field\n          as='textarea'\n          name='jobDescription'\n          className='form-control form-control-lg form-control-solid'\n          rows={6}\n        ></Field>\n        <div className='text-danger mt-2'>\n          <ErrorMessage name='jobDescription' />\n        </div>\n      </div>\n\n      {/* <div className='fv-row mb-10 mt-3'>\n        <label className='form-label required'>The skills/job experience you would like to highlight about yourself</label>\n\n        <Field\n          as='textarea'\n          name='skillHighlight'\n          className='form-control form-control-lg form-control-solid'\n          rows={6}\n        ></Field>\n        <div className='text-danger mt-2'>\n          <ErrorMessage name='skillHighlight' />\n        </div>\n      </div> */}\n      {/* <div className='pb-10 pb-lg-15'>\n        <h2 className='fw-bolder d-flex align-items-center text-dark'>\n          Choose Account Type\n          <i\n            className='fas fa-exclamation-circle ms-2 fs-7'\n            data-bs-toggle='tooltip'\n            title='Billing is issued based on your selected account type'\n          ></i>\n        </h2>\n\n        <div className='text-gray-400 fw-bold fs-6'>\n          If you need more info, please check out\n          <a href='/dashboard' className='link-primary fw-bolder'>\n            {' '}\n            Help Page\n          </a>\n          .\n        </div>\n      </div>\n\n      <div className='fv-row'>\n        <div className='row'>\n          <div className='col-lg-6'>\n            <Field\n              type='radio'\n              className='btn-check'\n              name='accountType'\n              value='personal'\n              id='kt_create_account_form_account_type_personal'\n            />\n            <label\n              className='btn btn-outline btn-outline-dashed btn-outline-default p-7 d-flex align-items-center mb-10'\n              htmlFor='kt_create_account_form_account_type_personal'\n            >\n              <KTIcon iconName='address-book' className='fs-3x me-5' />\n\n              <span className='d-block fw-bold text-start'>\n                <span className='text-dark fw-bolder d-block fs-4 mb-2'>Personal Account</span>\n                <span className='text-gray-400 fw-bold fs-6'>\n                  If you need more info, please check it out\n                </span>\n              </span>\n            </label>\n          </div>\n\n          <div className='col-lg-6'>\n            <Field\n              type='radio'\n              className='btn-check'\n              name='accountType'\n              value='corporate'\n              id='kt_create_account_form_account_type_corporate'\n            />\n            <label\n              className='btn btn-outline btn-outline-dashed btn-outline-default p-7 d-flex align-items-center'\n              htmlFor='kt_create_account_form_account_type_corporate'\n            >\n              <KTIcon iconName='briefcase' className='fs-3x me-5' />\n\n              <span className='d-block fw-bold text-start'>\n                <span className='text-dark fw-bolder d-block fs-4 mb-2'>Corporate Account</span>\n                <span className='text-gray-400 fw-bold fs-6'>\n                  Create corporate account to mane users\n                </span>\n              </span>\n            </label>\n          </div>\n\n          <div className='text-danger mt-2'>\n            <ErrorMessage name='accountType' />\n          </div>\n        </div>\n      </div> */}\n    </div> \n  )\n}\n\nexport {Step1}\n","import React, {FC} from 'react'\nimport {Field, ErrorMessage} from 'formik'\n\nconst Step3: FC = () => {\n  return (\n    <div className='w-100'>\n      <div className='pb-10 pb-lg-12'>\n        <h2 className='fw-bolder text-dark'>AI COVER LETTER WRITER</h2>\n\n        <div className='text-gray-400 fw-bold fs-6 mt-5'>\n        Generate a professional cover letter in seconds! Just provide the job title, name of the company, and the skills/job experience you would like to highlight about yourself.\n          {/* <a href='/dashboard' className='link-primary fw-bolder'>\n            {' '}\n            Help Page\n          </a> */}\n        </div>\n      </div>\n\n      {/* <div className='fv-row mb-10'>\n        <label className='form-label required'>Your Full Name</label>\n\n        <Field name='fullName' className='form-control form-control-lg form-control-solid h-60px' />\n        <div className='text-danger mt-2'>\n          <ErrorMessage name='fullName' />\n        </div>\n      </div> */}\n\n      {/* <div className='fv-row mb-10'>\n        <label className='form-label'>Year Of Experince</label>\n        <Field name='yearExperince' className='form-control form-control-lg form-control-solid h-60px' />\n        <div className='text-danger mt-2'>\n          <ErrorMessage name='Experince' />\n        </div>\n      </div> */}\n       <div className='fv-row mb-10'>\n        <label className='form-label required'>The job title you are applying for</label>\n\n        <Field name='jobTitle' className='form-control form-control-lg form-control-solid h-60px' />\n        <div className='text-danger mt-2'>\n          <ErrorMessage name='jobTitle' />\n        </div>\n      </div>\n\n      <div className='fv-row mb-10'>\n        <label className='d-flex align-items-center form-label'>\n          <span className='required'>The name of the company</span>\n        </label>\n\n        <Field\n          name='companyName'\n          className='form-control form-control-lg form-control-solid h-60px'\n        />\n        <div className='text-danger mt-2'>\n          <ErrorMessage name='companyName' />\n        </div>\n\n        {/* <div className='form-text'>\n          Customers will see this shortened version of your statement descriptor\n        </div> */}\n      </div>\n\n      {/* <div className='fv-row mb-10'>\n        <label className='form-label required'>Corporation Type</label>\n\n        <Field\n          as='select'\n          name='businessType'\n          className='form-select form-select-lg form-select-solid'\n        >\n          <option></option>\n          <option value='1'>S Corporation</option>\n          <option value='1'>C Corporation</option>\n          <option value='2'>Sole Proprietorship</option>\n          <option value='3'>Non-profit</option>\n          <option value='4'>Limited Liability</option>\n          <option value='5'>General Partnership</option>\n        </Field>\n        <div className='text-danger mt-2'>\n          <ErrorMessage name='businessType' />\n        </div>\n      </div> */}\n\n      \n\n    \n\n      {/* <div className='fv-row mb-0'>\n        <label className='fs-6 fw-bold form-label required'>Contact Email</label>\n\n        <Field name='businessEmail' className='form-control form-control-lg form-control-solid' />\n        <div className='text-danger mt-2'>\n          <ErrorMessage name='businessEmail' />\n        </div>\n      </div> */}\n    </div>\n  )\n}\n\nexport {Step3}\n","/* eslint-disable jsx-a11y/anchor-is-valid */\nimport {FC, useEffect, useState} from 'react'\nimport {KTIcon} from '../../../../../_metronic/helpers'\nimport {ErrorMessage, Field} from 'formik'\nimport {CopyToClipboard} from 'react-copy-to-clipboard'\nimport { BarWave } from \"react-cssfx-loading\";\n\ninterface Step6Props {\n  coverLetter: string;\n  title:string;\n}\nconst Step6: FC <Step6Props>= ({coverLetter,title}) => {\n  const [copied, setCopied] = useState(false)\n  useEffect(() => {\n    if (!copied) {\n      return\n    }\n\n    setTimeout(() => {\n      setCopied(false)\n    }, 1500)\n  }, [copied])\n  return (\n<div className='w-100'>\n <div className='fv-row mb-10'>\n {coverLetter?\n    <div>\n    <h2 className='fw-bolde text-dark'>{title}</h2>\n      <div className='card card-body bg-dark  min-h-250px'>\n      <div className='text-gray-400 fw-bold fs-4 d-flex justify-content-end p-0'>\n            <CopyToClipboard text={coverLetter} onCopy={() => setCopied(true)}>\n            <a className='highlight-copy btn'>{copied ? 'copied' : <i className=\"far fa-copy text-primary\"></i>}</a>\n          </CopyToClipboard>\n            </div>\n          <div className='text-gray-400 fw-bold fs-4 mt-2 mb-10'>\n         {coverLetter?.split('\\n').map((e,i,arr)=>{\n          if(i==0)e.replace(/\\./g, \"\");\n          if(i==arr.length-2){\n            return <div>{e}</div>\n          }\n         return <div className='mb-4'>{e}</div>\n          })}\n      </div>\n      </div>\n        </div>:\n        <div className='d-flex flex-center'>\n       <BarWave  />\n       </div>\n\n}\n  </div>\n\n    </div> \n  \n  )\n}\n\nexport {Step6}\n","import * as Yup from 'yup'\n\nexport interface ICreateCoverLetter {\n  jobTitle:string,\n  companyName:string,\n  skillHighlight:string,\n  fullName:string,\n  resume:string,\n  jobDescription:string,\n  yearExperince:string\n}\n\nconst createAccountSchemas = [\n  Yup.object({\n    jobTitle: Yup.string().required().label('job title'),\n\n    // fullName: Yup.string().required().label('full name'),\n    companyName: Yup.string().required().label('company name'),\n    // : Yup.string().required().label('company name'),\n  }),\n  Yup.object({\n    // jobTitle: Yup.string().required().label('job title'),\n    jobDescription: Yup.string().required().label('skill highlight'),\n    resume: Yup.string().required().label('resume'),\n  }),\n  // Yup.object({\n  //   businessName: Yup.string().required().label('Business Name'),\n  //   businessDescriptor: Yup.string().required().label('Shortened Descriptor'),\n  //   businessType: Yup.string().required().label('Corporation Type'),\n  //   businessEmail: Yup.string().required().label('Contact Email'),\n  // }),\n  // Yup.object({\n  //   nameOnCard: Yup.string().required().label('Name On Card'),\n  //   cardNumber: Yup.string().required().label('Card Number'),\n  //   cardExpiryMonth: Yup.string().required().label('Expiration Month'),\n  //   cardExpiryYear: Yup.string().required().label('Expiration Year'),\n  //   cardCvv: Yup.string().required().label('CVV'),\n  // }),\n]\n\nconst inits: ICreateCoverLetter = {\n  jobTitle:'',\n  companyName:'',\n  skillHighlight:'',\n  fullName:'',\n  resume:'',\n  yearExperince:'',\n  jobDescription:''\n\n\n}\n\nexport {createAccountSchemas, inits}\n","import React, {FC, useEffect, useRef, useState} from 'react'\nimport {Step1} from './steps/Step1'\nimport {Step2} from './steps/Step2'\nimport {Step3} from './steps/Step3'\nimport {Step4} from './steps/Step4'\nimport {Step5} from './steps/Step5'\nimport {Step6} from './steps/Step6'\nimport {KTIcon} from '../../../../_metronic/helpers'\nimport {StepperComponent} from '../../../../_metronic/assets/ts/components'\nimport {Form, Formik, FormikValues} from 'formik'\nimport {createAccountSchemas, ICreateCoverLetter, inits} from './CreateAccountWizardHelper'\nimport { useGenerateCoverLetterMutation } from '../../../service/user_api'\n\nconst Vertical = () => {\n  const stepperRef = useRef<HTMLDivElement | null>(null)\n  const stepper = useRef<StepperComponent | null>(null)\n  const [currentSchema, setCurrentSchema] = useState(createAccountSchemas[0])\n  const [initValues] = useState<ICreateCoverLetter>(inits)\n  const [isSubmitButton, setSubmitButton] = useState(false)\n  const btnRef = useRef<HTMLButtonElement | null>(null);\n  const [generateCoverLetter,{data,isLoading,isError,error,isSuccess}]=useGenerateCoverLetterMutation()\n  const [coverLetter, setCoverLetter] = useState<string>('');\n  const [showSnippet, setShowSnippet] = useState(false);\n  \n \n\n  const loadStepper = () => {\n    stepper.current = StepperComponent.createInsance(stepperRef.current as HTMLDivElement)\n  }\n\n  const prevStep = () => {\n    if (!stepper.current) {\n      return\n    }\n    setCoverLetter('')\n    stepper.current.goPrev()\n    setCurrentSchema(createAccountSchemas[stepper.current.currentStepIndex - 1])\n    setSubmitButton(stepper.current.currentStepIndex+1 === stepper.current.totalStepsNumber)\n  }\n\n  const submitStep = (values: ICreateCoverLetter, actions: FormikValues) => {\n  btnRef.current?.setAttribute('data-kt-indicator', 'on');\n  // console.log(stepper?.current?.currentStepIndex,stepper.current?.totalStepsNumber)  \n\n    if (!stepper.current) {\n      return\n    }\n\n    if (stepper.current.currentStepIndex !== stepper.current.totalStepsNumber-1) {\n      stepper.current.goNext()\n    } else {\n      setCoverLetter('')\n       generateCoverLetter({\n      job_title:values.jobTitle,\n      company_name:values.companyName,\n      resume:values.resume,\n      job_description:values.jobDescription\n\n      // skill_highlight:values.skillHighlight,\n      // full_name:values.fullName,\n      // year_experince:values.yearExperince,\n    })\n    stepper.current.goNext()\n\n    }\n\n    setSubmitButton(stepper.current.currentStepIndex+1 === stepper.current.totalStepsNumber)\n\n    setCurrentSchema(createAccountSchemas[stepper.current.currentStepIndex - 1])\n   \n  }\n  useEffect(()=>{\n    btnRef.current?.removeAttribute(\"data-kt-indicator\");\n    if(isSuccess){\n      \n      data && setCoverLetter(data)\n      setShowSnippet(!showSnippet);\n    }\n    },[data])\n\n  useEffect(() => {\n    if (!stepperRef.current) {\n      return\n    }\n    loadStepper()\n  }, [stepperRef])\n\n  // useEffect(() => {\n    \n  // }, []);\n\n\n  return (\n    // <div className='card'>\n    //   <div className='card-body'>\n    //     <div\n    //       ref={stepperRef}\n    //       className='stepper stepper-links d-flex flex-column pt-15'\n    //       id='kt_create_account_stepper'\n    //     >\n    //       <div className='stepper-nav mb-5'>\n    //         <div className='stepper-item current' data-kt-stepper-element='nav'>\n    //           <h3 className='stepper-title'>Personal Info</h3>\n    //         </div>\n\n    //         <div className='stepper-item' data-kt-stepper-element='nav'>\n    //           <h3 className='stepper-title'>Job Info</h3>\n    //         </div>\n\n    //        <div className='stepper-item' data-kt-stepper-element='nav'>\n    //           <h3 className='stepper-title'>Cover Letter</h3>\n    //         </div>\n    //       </div>\n    <div\n    ref={stepperRef}\n    className='stepper stepper-pills stepper-column d-flex flex-column flex-xl-row flex-row-fluid'\n    id='kt_create_account_stepper'\n  >\n    {/* begin::Aside*/}\n    <div className='card d-flex justify-content-center justify-content-xl-start flex-row-auto w-100 w-xl-300px w-xxl-400px me-9'>\n      {/* begin::Wrapper*/}\n      <div className='card-body px-6 px-lg-10 px-xxl-15 py-20'>\n        {/* begin::Nav*/}\n        <div className='stepper-nav'>\n          {/* begin::Step 1*/}\n          <div className='stepper-item current' data-kt-stepper-element='nav'>\n            {/* begin::Wrapper*/}\n            <div className='stepper-wrapper'>\n              {/* begin::Icon*/}\n              <div className='stepper-icon w-40px h-40px'>\n                <i className='stepper-check fas fa-check'></i>\n                <span className='stepper-number'>1</span>\n              </div>\n              {/* end::Icon*/}\n\n              {/* begin::Label*/}\n              <div className='stepper-label'>\n                <h3 className='stepper-title'>Personal Info</h3>\n                <div className='stepper-desc fw-semibold'>Add Your Personal Details</div>\n              </div>\n              {/* end::Label*/}\n            </div>\n            {/* end::Wrapper*/}\n\n            {/* begin::Line*/}\n            <div className='stepper-line h-40px'></div>\n            {/* end::Line*/}\n          </div>\n          {/* end::Step 1*/}\n\n          {/* begin::Step 2*/}\n          <div className='stepper-item' data-kt-stepper-element='nav'>\n            {/* begin::Wrapper*/}\n            <div className='stepper-wrapper'>\n              {/* begin::Icon*/}\n              <div className='stepper-icon w-40px h-40px'>\n                <i className='stepper-check fas fa-check'></i>\n                <span className='stepper-number'>2</span>\n              </div>\n              {/* end::Icon*/}\n\n              {/* begin::Label*/}\n              <div className='stepper-label'>\n                <h3 className='stepper-title'>Job Info</h3>\n                <div className='stepper-desc fw-semibold'>Add Your Job Info</div>\n              </div>\n              {/* end::Label*/}\n            </div>\n            {/* end::Wrapper*/}\n\n            {/* begin::Line*/}\n            <div className='stepper-line h-40px'></div>\n            {/* end::Line*/}\n          </div>\n          {/* end::Step 2*/}\n\n          {/* begin::Step 3*/}\n          <div className='stepper-item' data-kt-stepper-element='nav'>\n            {/* begin::Wrapper*/}\n            <div className='stepper-wrapper'>\n              {/* begin::Icon*/}\n              <div className='stepper-icon w-40px h-40px'>\n                <i className='stepper-check fas fa-check'></i>\n                <span className='stepper-number'>3</span>\n              </div>\n              {/* end::Icon*/}\n\n              {/* begin::Label*/}\n              <div className='stepper-label'>\n                <h3 className='stepper-title'>Cover Letter</h3>\n                <div className='stepper-desc fw-semibold'>Get Professional Cover Letter</div>\n              </div>\n              {/* end::Label*/}\n            </div>\n            {/* end::Wrapper*/}\n\n            {/* begin::Line*/}\n            <div className='stepper-line h-40px'></div>\n            {/* end::Line*/}\n          </div>\n          {/* end::Step 3*/}\n        </div>\n        {/* end::Nav*/}\n      </div>\n      {/* end::Wrapper*/}\n    </div>\n    {/* begin::Aside*/}\n    <div className='d-flex flex-row-fluid flex-center bg-body rounded'>\n\n          <Formik validationSchema={currentSchema} initialValues={initValues} onSubmit={submitStep}>\n            {() => (\n   \n              <Form className='py-20 w-100 w-xl-700px px-9' id='kt_create_account_form'>\n                {/* <div className='current' data-kt-stepper-element='content'>\n                  <Step1 />\n                </div>\n\n                <div data-kt-stepper-element='content'>\n                  <Step2 />\n                </div> */}\n                \n                <div className='current' data-kt-stepper-element='content'>\n                  <Step3 />\n                </div>\n                <div data-kt-stepper-element='content'>\n                  <Step1 />\n                </div>\n                <div data-kt-stepper-element='content'>\n                  <Step6 coverLetter={coverLetter} title=\"Cover Letter\"/>\n                </div>\n\n                <div className='d-flex flex-stack pt-15'>\n                {!isLoading &&<div className='mr-2'>\n                    <button\n                      onClick={prevStep}\n                      type='button'\n                      className='btn btn-lg btn-light-primary me-3'\n                      data-kt-stepper-action='previous'\n                    >\n                      <KTIcon iconName='arrow-left' className='fs-4 me-1' />\n                      Back\n                    </button>\n                  </div>}\n\n\n                 {!isLoading && !coverLetter && <div>\n                    <button type='submit' className='btn btn-lg btn-primary me-3'>\n                      <span className='indicator-label'>\n                        {!isSubmitButton && 'Continue'}\n                        {isSubmitButton && 'Generate'}\n                        <KTIcon iconName='arrow-right' className='fs-3 ms-2 me-0' />\n                      </span>\n                    </button>\n                  </div>}\n\n                  {/* <div>\n                    <button ref={btnRef} type='submit' className='btn btn-lg btn-primary me-3'>\n                      <span className='indicator-label'>\n                      {!isSubmitButton && 'Continue'}\n                        {isSubmitButton && 'Generate'}\n                      \n                        <span className=\"indicator-label\">Generate</span>\n                        <span className=\"indicator-progress\">Please wait... \n                        <span className=\"spinner-border spinner-border-sm align-middle ms-2\"></span>\n                        </span>\n                        {!isLoading&&<KTIcon iconName='arrow-right' className='fs-3 ms-2 me-0' />}\n                        </span>\n                    </button>\n                  </div> */}\n                </div>\n              </Form>\n            )}\n          </Formik>       \n        \n      </div>\n        </div>\n    // </div>\n  )\n}\n\nexport {Vertical}\n","import React, {FC, useEffect,useState} from 'react'\nimport {KTIcon, toAbsoluteUrl} from '../../../../../_metronic/helpers'\nimport {ErrorMessage, Field} from 'formik'\nimport { useGetFieldsQuery, useGetTrainingsQuery } from '../../../../service/user_api'\nimport { useField,useFormikContext } from 'formik';\n\n\n\nconst Step4: FC = () => {\n  interface FormValues {\n    field: string; \n  }\n  const { values } = useFormikContext<FormValues>();\n  const {data}= useGetFieldsQuery('')\n  const {data:trainingData,isFetching,refetch}= useGetTrainingsQuery({\n    field:values.field\n   })\n\n  useEffect(()=>{\n   refetch()\n  },[values.field])\n  return (\n    <div className='w-100'>\n       <div className='pb-10 pb-lg-12'>\n        <h2 className='fw-bolder text-dark'>AI Career Guide</h2>\n        <div className='text-gray-400 fw-bold fs-6 mt-3'>\n        Discover your dream career with the AI Career Guide! Whether you're a recent graduate or looking to make a career change, this powerful tool is designed to assist you!\n        </div>\n      </div>\n      {/* <div className='pb-10 pb-lg-15'>\n        <h2 className='fw-bolder text-dark'>Billing Details</h2>\n\n        <div className='text-gray-400 fw-bold fs-6'>\n          If you need more info, please check out\n          <a href='/dashboard' className='text-primary fw-bolder'>\n            {' '}\n            Help Page\n          </a>\n          .\n        </div>\n      </div> */}\n{/* \n      <div className='d-flex flex-column mb-7 fv-row'>\n        <label className='d-flex align-items-center fs-6 fw-bold form-label mb-2'>\n          <span className='required'>Name On Card</span>\n          <i\n            className='fas fa-exclamation-circle ms-2 fs-7'\n            data-bs-toggle='tooltip'\n            title=\"Specify a card holder's name\"\n          ></i>\n        </label>\n\n        <Field\n          type='text'\n          className='form-control form-control-solid'\n          placeholder=''\n          name='nameOnCard'\n        />\n        <div className='text-danger mt-2'>\n          <ErrorMessage name='nameOnCard' />\n        </div>\n      </div> */}\n{/* \n      <div className='d-flex flex-column mb-7 fv-row'>\n        <label className='required fs-6 fw-bold form-label mb-2'>Card Number</label>\n\n        <div className='position-relative'>\n          <Field\n            type='text'\n            className='form-control form-control-solid'\n            placeholder='Enter card number'\n            name='cardNumber'\n          />\n          <div className='text-danger mt-2'>\n            <ErrorMessage name='cardNumber' />\n          </div>\n\n          <div className='position-absolute translate-middle-y top-50 end-0 me-5'>\n            <img src={toAbsoluteUrl('/media/svg/card-logos/visa.svg')} alt='' className='h-25px' />\n            <img\n              src={toAbsoluteUrl('/media/svg/card-logos/mastercard.svg')}\n              alt=''\n              className='h-25px'\n            />\n            <img\n              src={toAbsoluteUrl('/media/svg/card-logos/american-express.svg')}\n              alt=''\n              className='h-25px'\n            />\n          </div>\n        </div>\n      </div> */}\n\n     \n        <div className='d-flex flex-column fv-row'>\n          <label className='required fs-6 fw-bold form-label mb-2'>Field/Department</label>\n          <div className='row fv-row mb-2'>\n          <Field as='select' name='field' className='form-select form-select-solid h-60px pb-3'>\n            <option value={''}>Select Field</option>\n            {data?.map((field, index) => (\n              <option key={index} value={field}>{field}</option>\n            ))}\n          </Field>\n              \n              <div className='text-danger mt-2'>\n                <ErrorMessage name='field' />\n             </div>\n            </div>\n\n          <div className='d-flex flex-column fv-row'>\n          <label className='required fs-6 fw-bold form-label mb-2'>Training/Opportunity</label>\n          <div className='row fv-row'>\n              <Field as='select' name='training' className='form-select form-select-solid h-60px'>\n                <option value={''}>Select training</option>\n                {trainingData?.map((field, index) => (\n              <option key={index} value={field}>{field}</option>\n            ))}\n                {/* <option value='BAS Agent Registration Skill Set'>BAS Agent Registration Skill Set</option>\n                <option value='Certificate III in Accounts Administration'>Certificate III in Accounts Administration</option>\n                <option value='Certificate IV in Accounting and Bookkeeping'>Certificate IV in Accounting and Bookkeeping</option>\n                <option value='Certificate IV in Leadership and Management'>Certificate IV in Leadership and Management</option>\n                <option value='Certificate IV in Project Management Practice'>Certificate IV in Project Management Practice</option>\n                <option value='Diploma of Business'>Diploma of Business</option>\n                <option value='Diploma of Leadership and Management'>Diploma of Leadership and Management</option>\n                <option value='Diploma of Project Management'>Diploma of Project Management</option>\n                <option value='Certificate III in Business'>Certificate III in Business</option>\n                <option value='Certificate IV in Cyber Security'>Certificate IV in Cyber Security</option>\n                <option value='Certificate III in Information Technology'>Certificate III in Information Technology</option> */}\n              </Field>\n              <div className='text-danger mt-2'>\n                <ErrorMessage name='training' />\n              </div>\n          </div>\n        </div>\n{/* \n        <div className='col-md-4 fv-row'>\n          <label className='d-flex align-items-center fs-6 fw-bold form-label mb-2'>\n            <span className='required'>CVV</span>\n            <i\n              className='fas fa-exclamation-circle ms-2 fs-7'\n              data-bs-toggle='tooltip'\n              title='Enter a card CVV code'\n            ></i>\n          </label>\n\n          <div className='position-relative'>\n            <Field\n              type='text'\n              className='form-control form-control-solid'\n              minLength={3}\n              maxLength={4}\n              placeholder='CVV'\n              name='cardCvv'\n            />\n            <div className='text-danger mt-2'>\n              <ErrorMessage name='cardCvv' />\n            </div>\n\n            <div className='position-absolute translate-middle-y top-50 end-0 me-3'>\n              <KTIcon iconName='credit-cart' className='fs-2hx' />\n            </div>\n          </div>\n        </div> */}\n      </div>\n\n      {/* <div className='d-flex flex-stack'>\n        <div className='me-5'>\n          <label className='fs-6 fw-bold form-label'>Save Card for further billing?</label>\n          <div className='fs-7 fw-bold text-gray-400'>\n            If you need more info, please check budget planning\n          </div>\n        </div>\n\n        <label className='form-check form-switch form-check-custom form-check-solid'>\n          <Field className='form-check-input' type='checkbox' value='1' checked={true} />\n          <span className='form-check-label fw-bold text-gray-400'>Save Card</span>\n        </label>\n      </div> */}\n    </div>\n  )\n}\n\nexport {Step4}\n","import * as Yup from 'yup'\n\nexport interface ICreateFieldInfo {\n  field:string,\n  training:string,\n \n}\nexport interface IGeneratedResponse<T> {\n  job_title:string,\n  company_name:string,\n  resume:T,\n  job_description:string\n \n}\n\nconst createFieldFilterSchemas = [\n  Yup.object({\n    field: Yup.string().required().label('field'),\n    training: Yup.string().required().label('training'),\n  }),\n]\n\nconst inits: ICreateFieldInfo = {\n  field:'',\n  training:'',\n}\n\nexport {createFieldFilterSchemas, inits}\n","import React, {FC, useEffect, useRef, useState} from 'react'\nimport {Step1} from './steps/Step1'\nimport {Step2} from './steps/Step2'\nimport {Step3} from './steps/Step3'\nimport {Step4} from './steps/Step4'\nimport {Step6} from './steps/Step6'\nimport {KTIcon} from '../../../../_metronic/helpers'\nimport {StepperComponent} from '../../../../_metronic/assets/ts/components'\nimport {Form, Formik, FormikValues} from 'formik'\nimport {CopyToClipboard} from 'react-copy-to-clipboard'\nimport {ICreateFieldInfo,createFieldFilterSchemas, inits} from './CreateFieldInfo'\nimport { useGenerateFieldInfoMutation } from '../../../service/user_api'\nconst Horizontal: FC = () => {\n  const stepperRef = useRef<HTMLDivElement | null>(null)\n  const stepper = useRef<StepperComponent | null>(null)\n  const [currentSchema, setCurrentSchema] = useState(createFieldFilterSchemas[0])\n  const [initValues] = useState<ICreateFieldInfo>(inits)\n  const [isSubmitButton, setSubmitButton] = useState(false)\n  const btnRef = useRef<HTMLButtonElement | null>(null);\n  const [generateFieldInfo,{data,isLoading,isError,error,isSuccess}]=useGenerateFieldInfoMutation()\n  const [coverLetter, setCoverLetter] = useState('');\n  const [showSnippet, setShowSnippet] = useState(false);\n  \n  const loadStepper = () => {\n    stepper.current = StepperComponent.createInsance(stepperRef.current as HTMLDivElement)\n  }\n\n  const prevStep = () => {\n    if (!stepper.current) {\n      return\n    }\n    setCoverLetter('')\n    stepper.current.goPrev()\n    setCurrentSchema(createFieldFilterSchemas[stepper.current.currentStepIndex - 1])\n    setSubmitButton(stepper.current.currentStepIndex+1 === stepper.current.totalStepsNumber)\n  }\n\n  const submitStep = (values: ICreateFieldInfo, actions: FormikValues) => {\n    console.log(stepper?.current?.currentStepIndex,stepper.current?.totalStepsNumber)  \n    console.log(values)  \n  btnRef.current?.setAttribute('data-kt-indicator', 'on');\n \n  if (!stepper.current) {\n    return\n  }\n\n  if (stepper.current.currentStepIndex !== stepper.current.totalStepsNumber-1) {\n    console.log(\"send api\")\n    stepper.current.goNext()\n  } else {\n    // stepper.current.goto(1)\n    // actions.resetForm()\n    console.log(\"send api\")\n    setCoverLetter('')\n    generateFieldInfo({\n      field:values.field,\n      training:values.training,\n    })\n  stepper.current.goNext()\n    // if (!stepper.current) {\n    //   return\n    // }\n\n    // if (stepper.current.currentStepIndex !== stepper.current.totalStepsNumber) {\n    //   stepper.current.goNext()\n    // } else {\n    //   stepper.current.goto(1)\n    //   actions.resetForm()\n    // }\n\n    setSubmitButton(stepper.current.currentStepIndex+1 === stepper.current.totalStepsNumber)\n\n    setCurrentSchema(createFieldFilterSchemas[stepper.current.currentStepIndex - 1])\n  }\n}\n\nuseEffect(()=>{\n  btnRef.current?.removeAttribute(\"data-kt-indicator\");\n  if(isSuccess){\n    setCoverLetter(data)\n    setShowSnippet(!showSnippet);\n  }\n  },[data])\n\nuseEffect(() => {\n  if (!stepperRef.current) {\n    return\n  }\n  loadStepper()\n}, [stepperRef])\n\n  // useEffect(() => {\n  //   if (!stepperRef.current) {\n  //     return\n  //   }\n\n  //   loadStepper()\n  // }, [stepperRef])\n  // const [copied, setCopied] = useState(false)\n  // useEffect(() => {\n  //   if (!copied) {\n  //     return\n  //   }\n\n  //   setTimeout(() => {\n  //     setCopied(false)\n  //   }, 1500)\n  // }, [copied])\n\n  return (\n    <div className='card'>\n      <div className='card-body'>\n        <div\n          ref={stepperRef}\n          className='stepper stepper-links d-flex flex-column pt-10'\n          id='kt_create_account_stepper'\n        >\n          <div className='stepper-nav mb-5'>\n            <div className='stepper-item current' data-kt-stepper-element='nav'>\n              <h3 className='stepper-title'>Details</h3>\n            </div>\n\n            <div className='stepper-item' data-kt-stepper-element='nav'>\n              <h3 className='stepper-title'>Field Info</h3>\n            </div>\n{/* \n            <div className='stepper-item' data-kt-stepper-element='nav'>\n              <h3 className='stepper-title'>Business Info</h3>\n            </div>\n\n            <div className='stepper-item' data-kt-stepper-element='nav'>\n              <h3 className='stepper-title'>Billing Details</h3>\n            </div>\n\n            <div className='stepper-item' data-kt-stepper-element='nav'>\n              <h3 className='stepper-title'>Completed</h3>\n            </div> */}\n          </div>\n\n          <Formik validationSchema={currentSchema} initialValues={initValues} onSubmit={submitStep}>\n            {() => (\n              <Form className='mx-auto mw-600px w-100 pt-15 pb-10' id='kt_create_account_form'>\n                {/* <div className='current' data-kt-stepper-element='content'>\n                  <Step1 />\n                </div>\n\n                <div data-kt-stepper-element='content'>\n                  <Step2 />\n                </div>\n\n                <div data-kt-stepper-element='content'>\n                  <Step4 />\n                </div> */}\n\n                <div className='current' data-kt-stepper-element='content'>\n                  <Step4 />\n                </div>\n                <div data-kt-stepper-element='content'>\n                  <Step6 coverLetter={coverLetter} title=\"Field Information\"/>\n                </div>\n{/* \n                <div data-kt-stepper-element='content'>\n                  <Step5 />\n                </div> */}\n\n                <div className='d-flex flex-center pt-15'>\n                {!isLoading &&<div className='mr-2'>\n                    <button\n                      onClick={prevStep}\n                      type='button'\n                      className='btn btn-lg btn-light-primary me-3'\n                      data-kt-stepper-action='previous'\n                    >\n                      <KTIcon iconName='arrow-left' className='fs-4 me-1' />\n                      Back\n                    </button>\n                  </div>}\n\n\n                 {!isLoading && !coverLetter && <div>\n                    <button type='submit' className='btn btn-lg btn-primary me-3'>\n                      <span className='indicator-label'>\n                        {!isSubmitButton && 'Continue'}\n                        {isSubmitButton && 'Generate'}\n                        <KTIcon iconName='arrow-right' className='fs-3 ms-2 me-0' />\n                      </span>\n                    </button>\n                  </div>}\n                </div>\n              </Form>\n            )}\n          </Formik> \n        \n      </div>\n        </div>\n    </div>\n  )\n}\n\nexport {Horizontal}\n","import {Route, Routes, Outlet, Navigate} from 'react-router-dom'\nimport {PageLink, PageTitle} from '../../../_metronic/layout/core'\nimport {Vertical} from './components/Vertical'\nimport {Horizontal} from './components/Horizontal'\n\nconst wizardsBreadCrumbs: Array<PageLink> = [\n  {\n    title: 'AI',\n    path: '/ai/career-guide',\n    isSeparator: false,\n    isActive: false,\n  },\n  {\n    title: '',\n    path: '',\n    isSeparator: true,\n    isActive: false,\n  },\n]\n\nconst WizardsPage = () => (\n  <Routes>\n    <Route element={<Outlet />}>\n      <Route\n        path='career-guide'\n        element={\n          <>\n            <PageTitle breadcrumbs={wizardsBreadCrumbs}>Career Guide</PageTitle>\n            <Horizontal />\n          </>\n        }\n      />\n      <Route\n        path='cover-letter'\n        element={\n          <>\n            <PageTitle breadcrumbs={wizardsBreadCrumbs}>Cover Letter</PageTitle>\n            <Vertical />\n          </>\n        }\n      />\n      <Route index element={<Navigate to='/ai/cover-letter' />} />\n    </Route>\n  </Routes>\n)\n\nexport default WizardsPage\n"],"names":["Step1","_jsxs","className","children","_jsx","Field","as","name","rows","ErrorMessage","Step3","Step6","_ref","coverLetter","title","_useState","useState","_useState2","_slicedToArray","copied","setCopied","useEffect","setTimeout","CopyToClipboard","text","onCopy","split","map","e","i","arr","replace","length","BarWave","createAccountSchemas","Yup","jobTitle","required","label","companyName","jobDescription","resume","inits","skillHighlight","fullName","yearExperince","Vertical","stepperRef","useRef","stepper","currentSchema","setCurrentSchema","_useState3","initValues","_useState5","_useState6","isSubmitButton","setSubmitButton","btnRef","_useGenerateCoverLett","useGenerateCoverLetterMutation","_useGenerateCoverLett2","generateCoverLetter","_useGenerateCoverLett3","data","isLoading","isSuccess","isError","error","_useState7","_useState8","setCoverLetter","_useState9","_useState10","showSnippet","setShowSnippet","prevStep","current","goPrev","currentStepIndex","totalStepsNumber","_btnRef$current2","removeAttribute","StepperComponent","ref","id","Formik","validationSchema","initialValues","onSubmit","values","actions","_btnRef$current","setAttribute","job_title","company_name","job_description","goNext","Form","onClick","type","KTIcon","iconName","Step4","useFormikContext","useGetFieldsQuery","_useGetTrainingsQuery","useGetTrainingsQuery","field","trainingData","refetch","isFetching","value","index","createFieldFilterSchemas","training","Horizontal","_useGenerateFieldInfo","useGenerateFieldInfoMutation","_useGenerateFieldInfo2","generateFieldInfo","_useGenerateFieldInfo3","_stepper$current","_stepper$current2","console","log","wizardsBreadCrumbs","path","isSeparator","isActive","Routes","Route","element","Outlet","_Fragment","PageTitle","breadcrumbs","Navigate","to"],"sourceRoot":""}
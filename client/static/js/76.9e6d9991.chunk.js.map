{"version":3,"file":"static/js/76.9e6d9991.chunk.js","mappings":"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","sources":["app/modules/apps/user-management/users-list/core/_requests.ts","app/modules/apps/user-management/users-list/core/QueryRequestProvider.tsx","app/modules/apps/user-management/users-list/core/QueryResponseProvider.tsx","app/modules/apps/user-management/users-list/core/ListViewProvider.tsx","app/modules/apps/user-management/users-list/components/header/UsersListFilter.tsx","app/modules/apps/user-management/users-list/components/header/UserListToolbar.tsx","app/modules/apps/user-management/users-list/components/header/UsersListGrouping.tsx","app/modules/apps/user-management/users-list/components/header/UsersListSearchComponent.tsx","app/modules/apps/user-management/users-list/components/header/UsersListHeader.tsx","app/modules/apps/user-management/users-list/table/columns/CustomHeaderColumn.tsx","app/modules/apps/user-management/users-list/table/columns/CustomRow.tsx","app/modules/apps/user-management/users-list/table/columns/UserInfoCell.tsx","app/modules/apps/user-management/users-list/table/columns/UserLastLoginCell.tsx","app/modules/apps/user-management/users-list/table/columns/UserTwoStepsCell.tsx","app/modules/apps/user-management/users-list/table/columns/UserActionsCell.tsx","app/modules/apps/user-management/users-list/table/columns/UserSelectionCell.tsx","app/modules/apps/user-management/users-list/table/columns/UserCustomHeader.tsx","app/modules/apps/user-management/users-list/table/columns/UserSelectionHeader.tsx","app/modules/apps/user-management/users-list/table/columns/_columns.tsx","app/modules/apps/user-management/users-list/components/loading/UsersListLoading.tsx","app/modules/apps/user-management/users-list/components/pagination/UsersListPagination.tsx","app/modules/apps/user-management/users-list/table/UsersTable.tsx","app/modules/apps/user-management/users-list/user-edit-modal/UserEditModalHeader.tsx","app/modules/apps/user-management/users-list/core/_models.ts","app/modules/apps/user-management/users-list/user-edit-modal/UserEditModalForm.tsx","app/modules/apps/user-management/users-list/user-edit-modal/UserEditModalFormWrapper.tsx","app/modules/apps/user-management/users-list/user-edit-modal/UserEditModal.tsx","app/modules/apps/user-management/users-list/UsersList.tsx","app/modules/apps/user-management/UsersPage.tsx"],"sourcesContent":["import axios, {AxiosResponse} from 'axios'\nimport {ID, Response} from '../../../../../../_metronic/helpers'\nimport {User, UsersQueryResponse} from './_models'\n\nconst API_URL = process.env.REACT_APP_THEME_API_URL\nconst USER_URL = `${API_URL}/user`\nconst GET_USERS_URL = `${API_URL}/users/query`\n\nconst getUsers = (query: string): Promise<UsersQueryResponse> => {\n  return axios\n    .get(`${GET_USERS_URL}?${query}`)\n    .then((d: AxiosResponse<UsersQueryResponse>) => d.data)\n}\n\nconst getUserById = (id: ID): Promise<User | undefined> => {\n  return axios\n    .get(`${USER_URL}/${id}`)\n    .then((response: AxiosResponse<Response<User>>) => response.data)\n    .then((response: Response<User>) => response.data)\n}\n\nconst createUser = (user: User): Promise<User | undefined> => {\n  return axios\n    .put(USER_URL, user)\n    .then((response: AxiosResponse<Response<User>>) => response.data)\n    .then((response: Response<User>) => response.data)\n}\n\nconst updateUser = (user: User): Promise<User | undefined> => {\n  return axios\n    .post(`${USER_URL}/${user.id}`, user)\n    .then((response: AxiosResponse<Response<User>>) => response.data)\n    .then((response: Response<User>) => response.data)\n}\n\nconst deleteUser = (userId: ID): Promise<void> => {\n  return axios.delete(`${USER_URL}/${userId}`).then(() => {})\n}\n\nconst deleteSelectedUsers = (userIds: Array<ID>): Promise<void> => {\n  const requests = userIds.map((id) => axios.delete(`${USER_URL}/${id}`))\n  return axios.all(requests).then(() => {})\n}\n\nexport {getUsers, deleteUser, deleteSelectedUsers, getUserById, createUser, updateUser}\n","import {FC, useState, createContext, useContext} from 'react'\nimport {\n  QueryState,\n  QueryRequestContextProps,\n  initialQueryRequest,\n  WithChildren,\n} from '../../../../../../_metronic/helpers'\n\nconst QueryRequestContext = createContext<QueryRequestContextProps>(initialQueryRequest)\n\nconst QueryRequestProvider: FC<WithChildren> = ({children}) => {\n  const [state, setState] = useState<QueryState>(initialQueryRequest.state)\n\n  const updateState = (updates: Partial<QueryState>) => {\n    const updatedState = {...state, ...updates} as QueryState\n    setState(updatedState)\n  }\n\n  return (\n    <QueryRequestContext.Provider value={{state, updateState}}>\n      {children}\n    </QueryRequestContext.Provider>\n  )\n}\n\nconst useQueryRequest = () => useContext(QueryRequestContext)\nexport {QueryRequestProvider, useQueryRequest}\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport {FC, useContext, useState, useEffect, useMemo} from 'react'\nimport {useQuery} from 'react-query'\nimport {\n  createResponseContext,\n  initialQueryResponse,\n  initialQueryState,\n  PaginationState,\n  QUERIES,\n  stringifyRequestQuery,\n  WithChildren,\n} from '../../../../../../_metronic/helpers'\nimport {getUsers} from './_requests'\nimport {User} from './_models'\nimport {useQueryRequest} from './QueryRequestProvider'\n\nconst QueryResponseContext = createResponseContext<User>(initialQueryResponse)\nconst QueryResponseProvider: FC<WithChildren> = ({children}) => {\n  const {state} = useQueryRequest()\n  const [query, setQuery] = useState<string>(stringifyRequestQuery(state))\n  const updatedQuery = useMemo(() => stringifyRequestQuery(state), [state])\n\n  useEffect(() => {\n    if (query !== updatedQuery) {\n      setQuery(updatedQuery)\n    }\n  }, [updatedQuery])\n\n  const {\n    isFetching,\n    refetch,\n    data: response,\n  } = useQuery(\n    `${QUERIES.USERS_LIST}-${query}`,\n    () => {\n      return getUsers(query)\n    },\n    {cacheTime: 0, keepPreviousData: true, refetchOnWindowFocus: false}\n  )\n\n  return (\n    <QueryResponseContext.Provider value={{isLoading: isFetching, refetch, response, query}}>\n      {children}\n    </QueryResponseContext.Provider>\n  )\n}\n\nconst useQueryResponse = () => useContext(QueryResponseContext)\n\nconst useQueryResponseData = () => {\n  const {response} = useQueryResponse()\n  if (!response) {\n    return []\n  }\n\n  return response?.data || []\n}\n\nconst useQueryResponsePagination = () => {\n  const defaultPaginationState: PaginationState = {\n    links: [],\n    ...initialQueryState,\n  }\n\n  const {response} = useQueryResponse()\n  if (!response || !response.payload || !response.payload.pagination) {\n    return defaultPaginationState\n  }\n\n  return response.payload.pagination\n}\n\nconst useQueryResponseLoading = (): boolean => {\n  const {isLoading} = useQueryResponse()\n  return isLoading\n}\n\nexport {\n  QueryResponseProvider,\n  useQueryResponse,\n  useQueryResponseData,\n  useQueryResponsePagination,\n  useQueryResponseLoading,\n}\n","import {FC, useState, createContext, useContext, useMemo} from 'react'\nimport {\n  ID,\n  calculatedGroupingIsDisabled,\n  calculateIsAllDataSelected,\n  groupingOnSelect,\n  initialListView,\n  ListViewContextProps,\n  groupingOnSelectAll,\n  WithChildren,\n} from '../../../../../../_metronic/helpers'\nimport {useQueryResponse, useQueryResponseData} from './QueryResponseProvider'\n\nconst ListViewContext = createContext<ListViewContextProps>(initialListView)\n\nconst ListViewProvider: FC<WithChildren> = ({children}) => {\n  const [selected, setSelected] = useState<Array<ID>>(initialListView.selected)\n  const [itemIdForUpdate, setItemIdForUpdate] = useState<ID>(initialListView.itemIdForUpdate)\n  const {isLoading} = useQueryResponse()\n  const data = useQueryResponseData()\n  const disabled = useMemo(() => calculatedGroupingIsDisabled(isLoading, data), [isLoading, data])\n  const isAllSelected = useMemo(() => calculateIsAllDataSelected(data, selected), [data, selected])\n\n  return (\n    <ListViewContext.Provider\n      value={{\n        selected,\n        itemIdForUpdate,\n        setItemIdForUpdate,\n        disabled,\n        isAllSelected,\n        onSelect: (id: ID) => {\n          groupingOnSelect(id, selected, setSelected)\n        },\n        onSelectAll: () => {\n          groupingOnSelectAll(isAllSelected, setSelected, data)\n        },\n        clearSelected: () => {\n          setSelected([])\n        },\n      }}\n    >\n      {children}\n    </ListViewContext.Provider>\n  )\n}\n\nconst useListView = () => useContext(ListViewContext)\n\nexport {ListViewProvider, useListView}\n","import {useEffect, useState} from 'react'\nimport {MenuComponent} from '../../../../../../../_metronic/assets/ts/components'\nimport {initialQueryState, KTIcon} from '../../../../../../../_metronic/helpers'\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\nimport {useQueryResponse} from '../../core/QueryResponseProvider'\n\nconst UsersListFilter = () => {\n  const {updateState} = useQueryRequest()\n  const {isLoading} = useQueryResponse()\n  const [role, setRole] = useState<string | undefined>()\n  const [lastLogin, setLastLogin] = useState<string | undefined>()\n\n  useEffect(() => {\n    MenuComponent.reinitialization()\n  }, [])\n\n  const resetData = () => {\n    updateState({filter: undefined, ...initialQueryState})\n  }\n\n  const filterData = () => {\n    updateState({\n      filter: {role, last_login: lastLogin},\n      ...initialQueryState,\n    })\n  }\n\n  return (\n    <>\n      {/* begin::Filter Button */}\n      <button\n        disabled={isLoading}\n        type='button'\n        className='btn btn-light-primary me-3'\n        data-kt-menu-trigger='click'\n        data-kt-menu-placement='bottom-end'\n      >\n        <KTIcon iconName='filter' className='fs-2' />\n        Filter\n      </button>\n      {/* end::Filter Button */}\n      {/* begin::SubMenu */}\n      <div className='menu menu-sub menu-sub-dropdown w-300px w-md-325px' data-kt-menu='true'>\n        {/* begin::Header */}\n        <div className='px-7 py-5'>\n          <div className='fs-5 text-dark fw-bolder'>Filter Options</div>\n        </div>\n        {/* end::Header */}\n\n        {/* begin::Separator */}\n        <div className='separator border-gray-200'></div>\n        {/* end::Separator */}\n\n        {/* begin::Content */}\n        <div className='px-7 py-5' data-kt-user-table-filter='form'>\n          {/* begin::Input group */}\n          <div className='mb-10'>\n            <label className='form-label fs-6 fw-bold'>Role:</label>\n            <select\n              className='form-select form-select-solid fw-bolder'\n              data-kt-select2='true'\n              data-placeholder='Select option'\n              data-allow-clear='true'\n              data-kt-user-table-filter='role'\n              data-hide-search='true'\n              onChange={(e) => setRole(e.target.value)}\n              value={role}\n            >\n              <option value=''></option>\n              <option value='Administrator'>Administrator</option>\n              <option value='Analyst'>Analyst</option>\n              <option value='Developer'>Developer</option>\n              <option value='Support'>Support</option>\n              <option value='Trial'>Trial</option>\n            </select>\n          </div>\n          {/* end::Input group */}\n\n          {/* begin::Input group */}\n          <div className='mb-10'>\n            <label className='form-label fs-6 fw-bold'>Last login:</label>\n            <select\n              className='form-select form-select-solid fw-bolder'\n              data-kt-select2='true'\n              data-placeholder='Select option'\n              data-allow-clear='true'\n              data-kt-user-table-filter='two-step'\n              data-hide-search='true'\n              onChange={(e) => setLastLogin(e.target.value)}\n              value={lastLogin}\n            >\n              <option value=''></option>\n              <option value='Yesterday'>Yesterday</option>\n              <option value='20 mins ago'>20 mins ago</option>\n              <option value='5 hours ago'>5 hours ago</option>\n              <option value='2 days ago'>2 days ago</option>\n            </select>\n          </div>\n          {/* end::Input group */}\n\n          {/* begin::Actions */}\n          <div className='d-flex justify-content-end'>\n            <button\n              type='button'\n              disabled={isLoading}\n              onClick={filterData}\n              className='btn btn-light btn-active-light-primary fw-bold me-2 px-6'\n              data-kt-menu-dismiss='true'\n              data-kt-user-table-filter='reset'\n            >\n              Reset\n            </button>\n            <button\n              disabled={isLoading}\n              type='button'\n              onClick={resetData}\n              className='btn btn-primary fw-bold px-6'\n              data-kt-menu-dismiss='true'\n              data-kt-user-table-filter='filter'\n            >\n              Apply\n            </button>\n          </div>\n          {/* end::Actions */}\n        </div>\n        {/* end::Content */}\n      </div>\n      {/* end::SubMenu */}\n    </>\n  )\n}\n\nexport {UsersListFilter}\n","import {KTIcon} from '../../../../../../../_metronic/helpers'\nimport {useListView} from '../../core/ListViewProvider'\nimport {UsersListFilter} from './UsersListFilter'\n\nconst UsersListToolbar = () => {\n  const {setItemIdForUpdate} = useListView()\n  const openAddUserModal = () => {\n    setItemIdForUpdate(null)\n  }\n\n  return (\n    <div className='d-flex justify-content-end' data-kt-user-table-toolbar='base'>\n      <UsersListFilter />\n\n      {/* begin::Export */}\n      <button type='button' className='btn btn-light-primary me-3'>\n        <KTIcon iconName='exit-up' className='fs-2' />\n        Export\n      </button>\n      {/* end::Export */}\n\n      {/* begin::Add user */}\n      <button type='button' className='btn btn-primary' onClick={openAddUserModal}>\n        <KTIcon iconName='plus' className='fs-2' />\n        Add User\n      </button>\n      {/* end::Add user */}\n    </div>\n  )\n}\n\nexport {UsersListToolbar}\n","import {useQueryClient, useMutation} from 'react-query'\nimport {QUERIES} from '../../../../../../../_metronic/helpers'\nimport {useListView} from '../../core/ListViewProvider'\nimport {useQueryResponse} from '../../core/QueryResponseProvider'\nimport {deleteSelectedUsers} from '../../core/_requests'\n\nconst UsersListGrouping = () => {\n  const {selected, clearSelected} = useListView()\n  const queryClient = useQueryClient()\n  const {query} = useQueryResponse()\n\n  const deleteSelectedItems = useMutation(() => deleteSelectedUsers(selected), {\n    // 💡 response of the mutation is passed to onSuccess\n    onSuccess: () => {\n      // ✅ update detail view directly\n      queryClient.invalidateQueries([`${QUERIES.USERS_LIST}-${query}`])\n      clearSelected()\n    },\n  })\n\n  return (\n    <div className='d-flex justify-content-end align-items-center'>\n      <div className='fw-bolder me-5'>\n        <span className='me-2'>{selected.length}</span> Selected\n      </div>\n\n      <button\n        type='button'\n        className='btn btn-danger'\n        onClick={async () => await deleteSelectedItems.mutateAsync()}\n      >\n        Delete Selected\n      </button>\n    </div>\n  )\n}\n\nexport {UsersListGrouping}\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport {useEffect, useState} from 'react'\nimport {initialQueryState, KTIcon, useDebounce} from '../../../../../../../_metronic/helpers'\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\n\nconst UsersListSearchComponent = () => {\n  const {updateState} = useQueryRequest()\n  const [searchTerm, setSearchTerm] = useState<string>('')\n  // Debounce search term so that it only gives us latest value ...\n  // ... if searchTerm has not been updated within last 500ms.\n  // The goal is to only have the API call fire when user stops typing ...\n  // ... so that we aren't hitting our API rapidly.\n  const debouncedSearchTerm = useDebounce(searchTerm, 150)\n  // Effect for API call\n  useEffect(\n    () => {\n      if (debouncedSearchTerm !== undefined && searchTerm !== undefined) {\n        updateState({search: debouncedSearchTerm, ...initialQueryState})\n      }\n    },\n    [debouncedSearchTerm] // Only call effect if debounced search term changes\n    // More details about useDebounce: https://usehooks.com/useDebounce/\n  )\n\n  return (\n    <div className='card-title'>\n      {/* begin::Search */}\n      <div className='d-flex align-items-center position-relative my-1'>\n        <KTIcon iconName='magnifier' className='fs-1 position-absolute ms-6' />\n        <input\n          type='text'\n          data-kt-user-table-filter='search'\n          className='form-control form-control-solid w-250px ps-14'\n          placeholder='Search user'\n          value={searchTerm}\n          onChange={(e) => setSearchTerm(e.target.value)}\n        />\n      </div>\n      {/* end::Search */}\n    </div>\n  )\n}\n\nexport {UsersListSearchComponent}\n","import {useListView} from '../../core/ListViewProvider'\nimport {UsersListToolbar} from './UserListToolbar'\nimport {UsersListGrouping} from './UsersListGrouping'\nimport {UsersListSearchComponent} from './UsersListSearchComponent'\n\nconst UsersListHeader = () => {\n  const {selected} = useListView()\n  return (\n    <div className='card-header border-0 pt-6'>\n      <UsersListSearchComponent />\n      {/* begin::Card toolbar */}\n      <div className='card-toolbar'>\n        {/* begin::Group actions */}\n        {selected.length > 0 ? <UsersListGrouping /> : <UsersListToolbar />}\n        {/* end::Group actions */}\n      </div>\n      {/* end::Card toolbar */}\n    </div>\n  )\n}\n\nexport {UsersListHeader}\n","// @ts-nocheck\nimport {FC} from 'react'\nimport {ColumnInstance} from 'react-table'\nimport {User} from '../../core/_models'\n\ntype Props = {\n  column: ColumnInstance<User>\n}\n\nconst CustomHeaderColumn: FC<Props> = ({column}) => (\n  <>\n    {column.Header && typeof column.Header === 'string' ? (\n      <th {...column.getHeaderProps()}>{column.render('Header')}</th>\n    ) : (\n      column.render('Header')\n    )}\n  </>\n)\n\nexport {CustomHeaderColumn}\n","// @ts-nocheck\nimport clsx from 'clsx'\nimport {FC} from 'react'\nimport {Row} from 'react-table'\nimport {User} from '../../core/_models'\n\ntype Props = {\n  row: Row<User>\n}\n\nconst CustomRow: FC<Props> = ({row}) => (\n  <tr {...row.getRowProps()}>\n    {row.cells.map((cell) => {\n      return (\n        <td\n          {...cell.getCellProps()}\n          className={clsx({'text-end min-w-100px': cell.column.id === 'actions'})}\n        >\n          {cell.render('Cell')}\n        </td>\n      )\n    })}\n  </tr>\n)\n\nexport {CustomRow}\n","/* eslint-disable jsx-a11y/anchor-is-valid */\nimport clsx from 'clsx'\nimport {FC} from 'react'\nimport {toAbsoluteUrl} from '../../../../../../../_metronic/helpers'\nimport {User} from '../../core/_models'\n\ntype Props = {\n  user: User\n}\n\nconst UserInfoCell: FC<Props> = ({user}) => (\n  <div className='d-flex align-items-center'>\n    {/* begin:: Avatar */}\n    <div className='symbol symbol-circle symbol-50px overflow-hidden me-3'>\n      <a href='#'>\n        {user.avatar ? (\n          <div className='symbol-label'>\n            <img src={toAbsoluteUrl(`/media/${user.avatar}`)} alt={user.name} className='w-100' />\n          </div>\n        ) : (\n          <div\n            className={clsx(\n              'symbol-label fs-3',\n              `bg-light-${user.initials?.state}`,\n              `text-${user.initials?.state}`\n            )}\n          >\n            {user.initials?.label}\n          </div>\n        )}\n      </a>\n    </div>\n    <div className='d-flex flex-column'>\n      <a href='#' className='text-gray-800 text-hover-primary mb-1'>\n        {user.name}\n      </a>\n      <span>{user.email}</span>\n    </div>\n  </div>\n)\n\nexport {UserInfoCell}\n","import {FC} from 'react'\n\ntype Props = {\n  last_login?: string\n}\n\nconst UserLastLoginCell: FC<Props> = ({last_login}) => (\n  <div className='badge badge-light fw-bolder'>{last_login}</div>\n)\n\nexport {UserLastLoginCell}\n","import {FC} from 'react'\n\ntype Props = {\n  two_steps?: boolean\n}\n\nconst UserTwoStepsCell: FC<Props> = ({two_steps}) => (\n  <> {two_steps && <div className='badge badge-light-success fw-bolder'>Enabled</div>}</>\n)\n\nexport {UserTwoStepsCell}\n","/* eslint-disable jsx-a11y/anchor-is-valid */\nimport {FC, useEffect} from 'react'\nimport {useMutation, useQueryClient} from 'react-query'\nimport {MenuComponent} from '../../../../../../../_metronic/assets/ts/components'\nimport {ID, KTIcon, QUERIES} from '../../../../../../../_metronic/helpers'\nimport {useListView} from '../../core/ListViewProvider'\nimport {useQueryResponse} from '../../core/QueryResponseProvider'\nimport {deleteUser} from '../../core/_requests'\n\ntype Props = {\n  id: ID\n}\n\nconst UserActionsCell: FC<Props> = ({id}) => {\n  const {setItemIdForUpdate} = useListView()\n  const {query} = useQueryResponse()\n  const queryClient = useQueryClient()\n\n  useEffect(() => {\n    MenuComponent.reinitialization()\n  }, [])\n\n  const openEditModal = () => {\n    setItemIdForUpdate(id)\n  }\n\n  const deleteItem = useMutation(() => deleteUser(id), {\n    // 💡 response of the mutation is passed to onSuccess\n    onSuccess: () => {\n      // ✅ update detail view directly\n      queryClient.invalidateQueries([`${QUERIES.USERS_LIST}-${query}`])\n    },\n  })\n\n  return (\n    <>\n      <a\n        href='#'\n        className='btn btn-light btn-active-light-primary btn-sm'\n        data-kt-menu-trigger='click'\n        data-kt-menu-placement='bottom-end'\n      >\n        Actions\n        <KTIcon iconName='down' className='fs-5 m-0' />\n      </a>\n      {/* begin::Menu */}\n      <div\n        className='menu menu-sub menu-sub-dropdown menu-column menu-rounded menu-gray-600 menu-state-bg-light-primary fw-bold fs-7 w-125px py-4'\n        data-kt-menu='true'\n      >\n        {/* begin::Menu item */}\n        <div className='menu-item px-3'>\n          <a className='menu-link px-3' onClick={openEditModal}>\n            Edit\n          </a>\n        </div>\n        {/* end::Menu item */}\n\n        {/* begin::Menu item */}\n        <div className='menu-item px-3'>\n          <a\n            className='menu-link px-3'\n            data-kt-users-table-filter='delete_row'\n            onClick={async () => await deleteItem.mutateAsync()}\n          >\n            Delete\n          </a>\n        </div>\n        {/* end::Menu item */}\n      </div>\n      {/* end::Menu */}\n    </>\n  )\n}\n\nexport {UserActionsCell}\n","import {FC, useMemo} from 'react'\nimport {ID} from '../../../../../../../_metronic/helpers'\nimport {useListView} from '../../core/ListViewProvider'\n\ntype Props = {\n  id: ID\n}\n\nconst UserSelectionCell: FC<Props> = ({id}) => {\n  const {selected, onSelect} = useListView()\n  const isSelected = useMemo(() => selected.includes(id), [id, selected])\n  return (\n    <div className='form-check form-check-custom form-check-solid'>\n      <input\n        className='form-check-input'\n        type='checkbox'\n        data-kt-check={isSelected}\n        data-kt-check-target='#kt_table_users .form-check-input'\n        checked={isSelected}\n        onChange={() => onSelect(id)}\n      />\n    </div>\n  )\n}\n\nexport {UserSelectionCell}\n","import clsx from 'clsx'\nimport {FC, PropsWithChildren, useMemo} from 'react'\nimport {HeaderProps} from 'react-table'\nimport {initialQueryState} from '../../../../../../../_metronic/helpers'\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\nimport {User} from '../../core/_models'\n\ntype Props = {\n  className?: string\n  title?: string\n  tableProps: PropsWithChildren<HeaderProps<User>>\n}\nconst UserCustomHeader: FC<Props> = ({className, title, tableProps}) => {\n  const id = tableProps.column.id\n  const {state, updateState} = useQueryRequest()\n\n  const isSelectedForSorting = useMemo(() => {\n    return state.sort && state.sort === id\n  }, [state, id])\n  const order: 'asc' | 'desc' | undefined = useMemo(() => state.order, [state])\n\n  const sortColumn = () => {\n    // avoid sorting for these columns\n    if (id === 'actions' || id === 'selection') {\n      return\n    }\n\n    if (!isSelectedForSorting) {\n      // enable sort asc\n      updateState({sort: id, order: 'asc', ...initialQueryState})\n      return\n    }\n\n    if (isSelectedForSorting && order !== undefined) {\n      if (order === 'asc') {\n        // enable sort desc\n        updateState({sort: id, order: 'desc', ...initialQueryState})\n        return\n      }\n\n      // disable sort\n      updateState({sort: undefined, order: undefined, ...initialQueryState})\n    }\n  }\n\n  return (\n    <th\n      {...tableProps.column.getHeaderProps()}\n      className={clsx(\n        className,\n        isSelectedForSorting && order !== undefined && `table-sort-${order}`\n      )}\n      style={{cursor: 'pointer'}}\n      onClick={sortColumn}\n    >\n      {title}\n    </th>\n  )\n}\n\nexport {UserCustomHeader}\n","import {FC, PropsWithChildren} from 'react'\nimport {HeaderProps} from 'react-table'\nimport {useListView} from '../../core/ListViewProvider'\nimport {User} from '../../core/_models'\n\ntype Props = {\n  tableProps: PropsWithChildren<HeaderProps<User>>\n}\n\nconst UserSelectionHeader: FC<Props> = ({tableProps}) => {\n  const {isAllSelected, onSelectAll} = useListView()\n  return (\n    <th {...tableProps.column.getHeaderProps()} className='w-10px pe-2'>\n      <div className='form-check form-check-sm form-check-custom form-check-solid me-3'>\n        <input\n          className='form-check-input'\n          type='checkbox'\n          data-kt-check={isAllSelected}\n          data-kt-check-target='#kt_table_users .form-check-input'\n          checked={isAllSelected}\n          onChange={onSelectAll}\n        />\n      </div>\n    </th>\n  )\n}\n\nexport {UserSelectionHeader}\n","// @ts-nocheck\nimport {Column} from 'react-table'\nimport {UserInfoCell} from './UserInfoCell'\nimport {UserLastLoginCell} from './UserLastLoginCell'\nimport {UserTwoStepsCell} from './UserTwoStepsCell'\nimport {UserActionsCell} from './UserActionsCell'\nimport {UserSelectionCell} from './UserSelectionCell'\nimport {UserCustomHeader} from './UserCustomHeader'\nimport {UserSelectionHeader} from './UserSelectionHeader'\nimport {User} from '../../core/_models'\n\nconst usersColumns: ReadonlyArray<Column<User>> = [\n  {\n    Header: (props) => <UserSelectionHeader tableProps={props} />,\n    id: 'selection',\n    Cell: ({...props}) => <UserSelectionCell id={props.data[props.row.index].id} />,\n  },\n  {\n    Header: (props) => <UserCustomHeader tableProps={props} title='Name' className='min-w-125px' />,\n    id: 'name',\n    Cell: ({...props}) => <UserInfoCell user={props.data[props.row.index]} />,\n  },\n  {\n    Header: (props) => <UserCustomHeader tableProps={props} title='Role' className='min-w-125px' />,\n    accessor: 'role',\n  },\n  {\n    Header: (props) => (\n      <UserCustomHeader tableProps={props} title='Last login' className='min-w-125px' />\n    ),\n    id: 'last_login',\n    Cell: ({...props}) => <UserLastLoginCell last_login={props.data[props.row.index].last_login} />,\n  },\n  {\n    Header: (props) => (\n      <UserCustomHeader tableProps={props} title='Two steps' className='min-w-125px' />\n    ),\n    id: 'two_steps',\n    Cell: ({...props}) => <UserTwoStepsCell two_steps={props.data[props.row.index].two_steps} />,\n  },\n  {\n    Header: (props) => (\n      <UserCustomHeader tableProps={props} title='Joined day' className='min-w-125px' />\n    ),\n    accessor: 'joined_day',\n  },\n  {\n    Header: (props) => (\n      <UserCustomHeader tableProps={props} title='Actions' className='text-end min-w-100px' />\n    ),\n    id: 'actions',\n    Cell: ({...props}) => <UserActionsCell id={props.data[props.row.index].id} />,\n  },\n]\n\nexport {usersColumns}\n","const UsersListLoading = () => {\n  const styles = {\n    borderRadius: '0.475rem',\n    boxShadow: '0 0 50px 0 rgb(82 63 105 / 15%)',\n    backgroundColor: '#fff',\n    color: '#7e8299',\n    fontWeight: '500',\n    margin: '0',\n    width: 'auto',\n    padding: '1rem 2rem',\n    top: 'calc(50% - 2rem)',\n    left: 'calc(50% - 4rem)',\n  }\n\n  return <div style={{...styles, position: 'absolute', textAlign: 'center'}}>Processing...</div>\n}\n\nexport {UsersListLoading}\n","/* eslint-disable jsx-a11y/anchor-is-valid */\nimport clsx from 'clsx'\nimport {useQueryResponseLoading, useQueryResponsePagination} from '../../core/QueryResponseProvider'\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\nimport {PaginationState} from '../../../../../../../_metronic/helpers'\nimport {useMemo} from 'react'\n\nconst mappedLabel = (label: string): string => {\n  if (label === '&laquo; Previous') {\n    return 'Previous'\n  }\n\n  if (label === 'Next &raquo;') {\n    return 'Next'\n  }\n\n  return label\n}\n\nconst UsersListPagination = () => {\n  const pagination = useQueryResponsePagination()\n  const isLoading = useQueryResponseLoading()\n  const {updateState} = useQueryRequest()\n  const updatePage = (page: number | undefined | null) => {\n    if (!page || isLoading || pagination.page === page) {\n      return\n    }\n\n    updateState({page, items_per_page: pagination.items_per_page || 10})\n  }\n\n  const PAGINATION_PAGES_COUNT = 5\n  const sliceLinks = (pagination?: PaginationState) => {\n    if (!pagination?.links?.length) {\n      return []\n    }\n\n    let scopedLinks = [...pagination.links]\n\n    let pageLinks: Array<{\n      label: string\n      active: boolean\n      url: string | null\n      page: number | null\n    }> = []\n    let previousLink: {label: string; active: boolean; url: string | null; page: number | null} =\n      scopedLinks.shift()!\n    let nextLink: {label: string; active: boolean; url: string | null; page: number | null} =\n      scopedLinks.pop()!\n\n    const halfOfPagesCount = Math.floor(PAGINATION_PAGES_COUNT / 2)\n\n    pageLinks.push(previousLink)\n\n    if (\n      pagination.page <= Math.round(PAGINATION_PAGES_COUNT / 2) ||\n      scopedLinks.length <= PAGINATION_PAGES_COUNT\n    ) {\n      pageLinks = [...pageLinks, ...scopedLinks.slice(0, PAGINATION_PAGES_COUNT)]\n    }\n\n    if (\n      pagination.page > scopedLinks.length - halfOfPagesCount &&\n      scopedLinks.length > PAGINATION_PAGES_COUNT\n    ) {\n      pageLinks = [\n        ...pageLinks,\n        ...scopedLinks.slice(scopedLinks.length - PAGINATION_PAGES_COUNT, scopedLinks.length),\n      ]\n    }\n\n    if (\n      !(\n        pagination.page <= Math.round(PAGINATION_PAGES_COUNT / 2) ||\n        scopedLinks.length <= PAGINATION_PAGES_COUNT\n      ) &&\n      !(pagination.page > scopedLinks.length - halfOfPagesCount)\n    ) {\n      pageLinks = [\n        ...pageLinks,\n        ...scopedLinks.slice(\n          pagination.page - 1 - halfOfPagesCount,\n          pagination.page + halfOfPagesCount\n        ),\n      ]\n    }\n\n    pageLinks.push(nextLink)\n\n    return pageLinks\n  }\n\n  const paginationLinks = useMemo(() => sliceLinks(pagination), [pagination])\n\n  return (\n    <div className='row'>\n      <div className='col-sm-12 col-md-5 d-flex align-items-center justify-content-center justify-content-md-start'></div>\n      <div className='col-sm-12 col-md-7 d-flex align-items-center justify-content-center justify-content-md-end'>\n        <div id='kt_table_users_paginate'>\n          <ul className='pagination'>\n            <li\n              className={clsx('page-item', {\n                disabled: isLoading || pagination.page === 1,\n              })}\n            >\n              <a onClick={() => updatePage(1)} style={{cursor: 'pointer'}} className='page-link'>\n                First\n              </a>\n            </li>\n            {paginationLinks\n              ?.map((link) => {\n                return {...link, label: mappedLabel(link.label)}\n              })\n              .map((link) => (\n                <li\n                  key={link.label}\n                  className={clsx('page-item', {\n                    active: pagination.page === link.page,\n                    disabled: isLoading,\n                    previous: link.label === 'Previous',\n                    next: link.label === 'Next',\n                  })}\n                >\n                  <a\n                    className={clsx('page-link', {\n                      'page-text': link.label === 'Previous' || link.label === 'Next',\n                      'me-5': link.label === 'Previous',\n                    })}\n                    onClick={() => updatePage(link.page)}\n                    style={{cursor: 'pointer'}}\n                  >\n                    {mappedLabel(link.label)}\n                  </a>\n                </li>\n              ))}\n            <li\n              className={clsx('page-item', {\n                disabled: isLoading || pagination.page === pagination.links?.length! - 2,\n              })}\n            >\n              <a\n                onClick={() => updatePage(pagination.links?.length! - 2)}\n                style={{cursor: 'pointer'}}\n                className='page-link'\n              >\n                Last\n              </a>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport {UsersListPagination}\n","import {useMemo} from 'react'\nimport {useTable, ColumnInstance, Row} from 'react-table'\nimport {CustomHeaderColumn} from '../table/columns/CustomHeaderColumn'\nimport {CustomRow} from '../table/columns/CustomRow'\nimport {useQueryResponseData, useQueryResponseLoading} from '../core/QueryResponseProvider'\nimport {usersColumns} from './columns/_columns'\nimport {User} from '../core/_models'\nimport {UsersListLoading} from '../components/loading/UsersListLoading'\nimport {UsersListPagination} from '../components/pagination/UsersListPagination'\nimport {KTCardBody} from '../../../../../../_metronic/helpers'\n\nconst UsersTable = () => {\n  const users = useQueryResponseData()\n  const isLoading = useQueryResponseLoading()\n  const data = useMemo(() => users, [users])\n  const columns = useMemo(() => usersColumns, [])\n  const {getTableProps, getTableBodyProps, headers, rows, prepareRow} = useTable({\n    columns,\n    data,\n  })\n\n  return (\n    <KTCardBody className='py-4'>\n      <div className='table-responsive'>\n        <table\n          id='kt_table_users'\n          className='table align-middle table-row-dashed fs-6 gy-5 dataTable no-footer'\n          {...getTableProps()}\n        >\n          <thead>\n            <tr className='text-start text-muted fw-bolder fs-7 text-uppercase gs-0'>\n              {headers.map((column: ColumnInstance<User>) => (\n                <CustomHeaderColumn key={column.id} column={column} />\n              ))}\n            </tr>\n          </thead>\n          <tbody className='text-gray-600 fw-bold' {...getTableBodyProps()}>\n            {rows.length > 0 ? (\n              rows.map((row: Row<User>, i) => {\n                prepareRow(row)\n                return <CustomRow row={row} key={`row-${i}-${row.id}`} />\n              })\n            ) : (\n              <tr>\n                <td colSpan={7}>\n                  <div className='d-flex text-center w-100 align-content-center justify-content-center'>\n                    No matching records found\n                  </div>\n                </td>\n              </tr>\n            )}\n          </tbody>\n        </table>\n      </div>\n      <UsersListPagination />\n      {isLoading && <UsersListLoading />}\n    </KTCardBody>\n  )\n}\n\nexport {UsersTable}\n","import {KTIcon} from '../../../../../../_metronic/helpers'\nimport {useListView} from '../core/ListViewProvider'\n\nconst UserEditModalHeader = () => {\n  const {setItemIdForUpdate} = useListView()\n\n  return (\n    <div className='modal-header'>\n      {/* begin::Modal title */}\n      <h2 className='fw-bolder'>Add User</h2>\n      {/* end::Modal title */}\n\n      {/* begin::Close */}\n      <div\n        className='btn btn-icon btn-sm btn-active-icon-primary'\n        data-kt-users-modal-action='close'\n        onClick={() => setItemIdForUpdate(undefined)}\n        style={{cursor: 'pointer'}}\n      >\n        <KTIcon iconName='cross' className='fs-1' />\n      </div>\n      {/* end::Close */}\n    </div>\n  )\n}\n\nexport {UserEditModalHeader}\n","import {ID, Response} from '../../../../../../_metronic/helpers'\nexport type User = {\n  id?: ID\n  name?: string\n  avatar?: string\n  email?: string\n  position?: string\n  role?: string\n  last_login?: string\n  two_steps?: boolean\n  joined_day?: string\n  online?: boolean\n  initials?: {\n    label: string\n    state: string\n  }\n}\nexport type Login={\n  email: string;\n  password: string;\n}\n\nexport type UsersQueryResponse = Response<Array<User>>\n\nexport const initialUser: User = {\n  avatar: 'avatars/300-6.jpg',\n  position: 'Art Director',\n  role: 'Administrator',\n  name: '',\n  email: '',\n}\n","import {FC, useState} from 'react'\nimport * as Yup from 'yup'\nimport {useFormik} from 'formik'\nimport {isNotEmpty, toAbsoluteUrl} from '../../../../../../_metronic/helpers'\nimport {initialUser, User} from '../core/_models'\nimport clsx from 'clsx'\nimport {useListView} from '../core/ListViewProvider'\nimport {UsersListLoading} from '../components/loading/UsersListLoading'\nimport {createUser, updateUser} from '../core/_requests'\nimport {useQueryResponse} from '../core/QueryResponseProvider'\n\ntype Props = {\n  isUserLoading: boolean\n  user: User\n}\n\nconst editUserSchema = Yup.object().shape({\n  email: Yup.string()\n    .email('Wrong email format')\n    .min(3, 'Minimum 3 symbols')\n    .max(50, 'Maximum 50 symbols')\n    .required('Email is required'),\n  name: Yup.string()\n    .min(3, 'Minimum 3 symbols')\n    .max(50, 'Maximum 50 symbols')\n    .required('Name is required'),\n})\n\nconst UserEditModalForm: FC<Props> = ({user, isUserLoading}) => {\n  const {setItemIdForUpdate} = useListView()\n  const {refetch} = useQueryResponse()\n\n  const [userForEdit] = useState<User>({\n    ...user,\n    avatar: user.avatar || initialUser.avatar,\n    role: user.role || initialUser.role,\n    position: user.position || initialUser.position,\n    name: user.name || initialUser.name,\n    email: user.email || initialUser.email,\n  })\n\n  const cancel = (withRefresh?: boolean) => {\n    if (withRefresh) {\n      refetch()\n    }\n    setItemIdForUpdate(undefined)\n  }\n\n  const blankImg = toAbsoluteUrl('/media/svg/avatars/blank.svg')\n  const userAvatarImg = toAbsoluteUrl(`/media/${userForEdit.avatar}`)\n\n  const formik = useFormik({\n    initialValues: userForEdit,\n    validationSchema: editUserSchema,\n    onSubmit: async (values, {setSubmitting}) => {\n      setSubmitting(true)\n      try {\n        if (isNotEmpty(values.id)) {\n          await updateUser(values)\n        } else {\n          await createUser(values)\n        }\n      } catch (ex) {\n        console.error(ex)\n      } finally {\n        setSubmitting(true)\n        cancel(true)\n      }\n    },\n  })\n\n  return (\n    <>\n      <form id='kt_modal_add_user_form' className='form' onSubmit={formik.handleSubmit} noValidate>\n        {/* begin::Scroll */}\n        <div\n          className='d-flex flex-column scroll-y me-n7 pe-7'\n          id='kt_modal_add_user_scroll'\n          data-kt-scroll='true'\n          data-kt-scroll-activate='{default: false, lg: true}'\n          data-kt-scroll-max-height='auto'\n          data-kt-scroll-dependencies='#kt_modal_add_user_header'\n          data-kt-scroll-wrappers='#kt_modal_add_user_scroll'\n          data-kt-scroll-offset='300px'\n        >\n          {/* begin::Input group */}\n          <div className='fv-row mb-7'>\n            {/* begin::Label */}\n            <label className='d-block fw-bold fs-6 mb-5'>Avatar</label>\n            {/* end::Label */}\n\n            {/* begin::Image input */}\n            <div\n              className='image-input image-input-outline'\n              data-kt-image-input='true'\n              style={{backgroundImage: `url('${blankImg}')`}}\n            >\n              {/* begin::Preview existing avatar */}\n              <div\n                className='image-input-wrapper w-125px h-125px'\n                style={{backgroundImage: `url('${userAvatarImg}')`}}\n              ></div>\n              {/* end::Preview existing avatar */}\n\n              {/* begin::Label */}\n              {/* <label\n              className='btn btn-icon btn-circle btn-active-color-primary w-25px h-25px bg-body shadow'\n              data-kt-image-input-action='change'\n              data-bs-toggle='tooltip'\n              title='Change avatar'\n            >\n              <i className='bi bi-pencil-fill fs-7'></i>\n\n              <input type='file' name='avatar' accept='.png, .jpg, .jpeg' />\n              <input type='hidden' name='avatar_remove' />\n            </label> */}\n              {/* end::Label */}\n\n              {/* begin::Cancel */}\n              {/* <span\n              className='btn btn-icon btn-circle btn-active-color-primary w-25px h-25px bg-body shadow'\n              data-kt-image-input-action='cancel'\n              data-bs-toggle='tooltip'\n              title='Cancel avatar'\n            >\n              <i className='bi bi-x fs-2'></i>\n            </span> */}\n              {/* end::Cancel */}\n\n              {/* begin::Remove */}\n              {/* <span\n              className='btn btn-icon btn-circle btn-active-color-primary w-25px h-25px bg-body shadow'\n              data-kt-image-input-action='remove'\n              data-bs-toggle='tooltip'\n              title='Remove avatar'\n            >\n              <i className='bi bi-x fs-2'></i>\n            </span> */}\n              {/* end::Remove */}\n            </div>\n            {/* end::Image input */}\n\n            {/* begin::Hint */}\n            {/* <div className='form-text'>Allowed file types: png, jpg, jpeg.</div> */}\n            {/* end::Hint */}\n          </div>\n          {/* end::Input group */}\n\n          {/* begin::Input group */}\n          <div className='fv-row mb-7'>\n            {/* begin::Label */}\n            <label className='required fw-bold fs-6 mb-2'>Full Name</label>\n            {/* end::Label */}\n\n            {/* begin::Input */}\n            <input\n              placeholder='Full name'\n              {...formik.getFieldProps('name')}\n              type='text'\n              name='name'\n              className={clsx(\n                'form-control form-control-solid mb-3 mb-lg-0',\n                {'is-invalid': formik.touched.name && formik.errors.name},\n                {\n                  'is-valid': formik.touched.name && !formik.errors.name,\n                }\n              )}\n              autoComplete='off'\n              disabled={formik.isSubmitting || isUserLoading}\n            />\n            {formik.touched.name && formik.errors.name && (\n              <div className='fv-plugins-message-container'>\n                <div className='fv-help-block'>\n                  <span role='alert'>{formik.errors.name}</span>\n                </div>\n              </div>\n            )}\n            {/* end::Input */}\n          </div>\n          {/* end::Input group */}\n\n          {/* begin::Input group */}\n          <div className='fv-row mb-7'>\n            {/* begin::Label */}\n            <label className='required fw-bold fs-6 mb-2'>Email</label>\n            {/* end::Label */}\n\n            {/* begin::Input */}\n            <input\n              placeholder='Email'\n              {...formik.getFieldProps('email')}\n              className={clsx(\n                'form-control form-control-solid mb-3 mb-lg-0',\n                {'is-invalid': formik.touched.email && formik.errors.email},\n                {\n                  'is-valid': formik.touched.email && !formik.errors.email,\n                }\n              )}\n              type='email'\n              name='email'\n              autoComplete='off'\n              disabled={formik.isSubmitting || isUserLoading}\n            />\n            {/* end::Input */}\n            {formik.touched.email && formik.errors.email && (\n              <div className='fv-plugins-message-container'>\n                <span role='alert'>{formik.errors.email}</span>\n              </div>\n            )}\n          </div>\n          {/* end::Input group */}\n\n          {/* begin::Input group */}\n          <div className='mb-7'>\n            {/* begin::Label */}\n            <label className='required fw-bold fs-6 mb-5'>Role</label>\n            {/* end::Label */}\n            {/* begin::Roles */}\n            {/* begin::Input row */}\n            <div className='d-flex fv-row'>\n              {/* begin::Radio */}\n              <div className='form-check form-check-custom form-check-solid'>\n                {/* begin::Input */}\n                <input\n                  className='form-check-input me-3'\n                  {...formik.getFieldProps('role')}\n                  name='role'\n                  type='radio'\n                  value='Administrator'\n                  id='kt_modal_update_role_option_0'\n                  checked={formik.values.role === 'Administrator'}\n                  disabled={formik.isSubmitting || isUserLoading}\n                />\n\n                {/* end::Input */}\n                {/* begin::Label */}\n                <label className='form-check-label' htmlFor='kt_modal_update_role_option_0'>\n                  <div className='fw-bolder text-gray-800'>Administrator</div>\n                  <div className='text-gray-600'>\n                    Best for business owners and company administrators\n                  </div>\n                </label>\n                {/* end::Label */}\n              </div>\n              {/* end::Radio */}\n            </div>\n            {/* end::Input row */}\n            <div className='separator separator-dashed my-5'></div>\n            {/* begin::Input row */}\n            <div className='d-flex fv-row'>\n              {/* begin::Radio */}\n              <div className='form-check form-check-custom form-check-solid'>\n                {/* begin::Input */}\n                <input\n                  className='form-check-input me-3'\n                  {...formik.getFieldProps('role')}\n                  name='role'\n                  type='radio'\n                  value='Developer'\n                  id='kt_modal_update_role_option_1'\n                  checked={formik.values.role === 'Developer'}\n                  disabled={formik.isSubmitting || isUserLoading}\n                />\n                {/* end::Input */}\n                {/* begin::Label */}\n                <label className='form-check-label' htmlFor='kt_modal_update_role_option_1'>\n                  <div className='fw-bolder text-gray-800'>Developer</div>\n                  <div className='text-gray-600'>\n                    Best for developers or people primarily using the API\n                  </div>\n                </label>\n                {/* end::Label */}\n              </div>\n              {/* end::Radio */}\n            </div>\n            {/* end::Input row */}\n            <div className='separator separator-dashed my-5'></div>\n            {/* begin::Input row */}\n            <div className='d-flex fv-row'>\n              {/* begin::Radio */}\n              <div className='form-check form-check-custom form-check-solid'>\n                {/* begin::Input */}\n                <input\n                  className='form-check-input me-3'\n                  {...formik.getFieldProps('role')}\n                  name='role'\n                  type='radio'\n                  value='Analyst'\n                  id='kt_modal_update_role_option_2'\n                  checked={formik.values.role === 'Analyst'}\n                  disabled={formik.isSubmitting || isUserLoading}\n                />\n\n                {/* end::Input */}\n                {/* begin::Label */}\n                <label className='form-check-label' htmlFor='kt_modal_update_role_option_2'>\n                  <div className='fw-bolder text-gray-800'>Analyst</div>\n                  <div className='text-gray-600'>\n                    Best for people who need full access to analytics data, but don't need to update\n                    business settings\n                  </div>\n                </label>\n                {/* end::Label */}\n              </div>\n              {/* end::Radio */}\n            </div>\n            {/* end::Input row */}\n            <div className='separator separator-dashed my-5'></div>\n            {/* begin::Input row */}\n            <div className='d-flex fv-row'>\n              {/* begin::Radio */}\n              <div className='form-check form-check-custom form-check-solid'>\n                {/* begin::Input */}\n                <input\n                  className='form-check-input me-3'\n                  {...formik.getFieldProps('role')}\n                  name='role'\n                  type='radio'\n                  value='Support'\n                  id='kt_modal_update_role_option_3'\n                  checked={formik.values.role === 'Support'}\n                  disabled={formik.isSubmitting || isUserLoading}\n                />\n                {/* end::Input */}\n                {/* begin::Label */}\n                <label className='form-check-label' htmlFor='kt_modal_update_role_option_3'>\n                  <div className='fw-bolder text-gray-800'>Support</div>\n                  <div className='text-gray-600'>\n                    Best for employees who regularly refund payments and respond to disputes\n                  </div>\n                </label>\n                {/* end::Label */}\n              </div>\n              {/* end::Radio */}\n            </div>\n            {/* end::Input row */}\n            <div className='separator separator-dashed my-5'></div>\n            {/* begin::Input row */}\n            <div className='d-flex fv-row'>\n              {/* begin::Radio */}\n              <div className='form-check form-check-custom form-check-solid'>\n                {/* begin::Input */}\n                <input\n                  className='form-check-input me-3'\n                  {...formik.getFieldProps('role')}\n                  name='role'\n                  type='radio'\n                  id='kt_modal_update_role_option_4'\n                  value='Trial'\n                  checked={formik.values.role === 'Trial'}\n                  disabled={formik.isSubmitting || isUserLoading}\n                />\n                {/* end::Input */}\n                {/* begin::Label */}\n                <label className='form-check-label' htmlFor='kt_modal_update_role_option_4'>\n                  <div className='fw-bolder text-gray-800'>Trial</div>\n                  <div className='text-gray-600'>\n                    Best for people who need to preview content data, but don't need to make any\n                    updates\n                  </div>\n                </label>\n                {/* end::Label */}\n              </div>\n              {/* end::Radio */}\n            </div>\n            {/* end::Input row */}\n            {/* end::Roles */}\n          </div>\n          {/* end::Input group */}\n        </div>\n        {/* end::Scroll */}\n\n        {/* begin::Actions */}\n        <div className='text-center pt-15'>\n          <button\n            type='reset'\n            onClick={() => cancel()}\n            className='btn btn-light me-3'\n            data-kt-users-modal-action='cancel'\n            disabled={formik.isSubmitting || isUserLoading}\n          >\n            Discard\n          </button>\n\n          <button\n            type='submit'\n            className='btn btn-primary'\n            data-kt-users-modal-action='submit'\n            disabled={isUserLoading || formik.isSubmitting || !formik.isValid || !formik.touched}\n          >\n            <span className='indicator-label'>Submit</span>\n            {(formik.isSubmitting || isUserLoading) && (\n              <span className='indicator-progress'>\n                Please wait...{' '}\n                <span className='spinner-border spinner-border-sm align-middle ms-2'></span>\n              </span>\n            )}\n          </button>\n        </div>\n        {/* end::Actions */}\n      </form>\n      {(formik.isSubmitting || isUserLoading) && <UsersListLoading />}\n    </>\n  )\n}\n\nexport {UserEditModalForm}\n","import {useQuery} from 'react-query'\nimport {UserEditModalForm} from './UserEditModalForm'\nimport {isNotEmpty, QUERIES} from '../../../../../../_metronic/helpers'\nimport {useListView} from '../core/ListViewProvider'\nimport {getUserById} from '../core/_requests'\n\nconst UserEditModalFormWrapper = () => {\n  const {itemIdForUpdate, setItemIdForUpdate} = useListView()\n  const enabledQuery: boolean = isNotEmpty(itemIdForUpdate)\n  const {\n    isLoading,\n    data: user,\n    error,\n  } = useQuery(\n    `${QUERIES.USERS_LIST}-user-${itemIdForUpdate}`,\n    () => {\n      return getUserById(itemIdForUpdate)\n    },\n    {\n      cacheTime: 0,\n      enabled: enabledQuery,\n      onError: (err) => {\n        setItemIdForUpdate(undefined)\n        console.error(err)\n      },\n    }\n  )\n\n  if (!itemIdForUpdate) {\n    return <UserEditModalForm isUserLoading={isLoading} user={{id: undefined}} />\n  }\n\n  if (!isLoading && !error && user) {\n    return <UserEditModalForm isUserLoading={isLoading} user={user} />\n  }\n\n  return null\n}\n\nexport {UserEditModalFormWrapper}\n","import {useEffect} from 'react'\nimport {UserEditModalHeader} from './UserEditModalHeader'\nimport {UserEditModalFormWrapper} from './UserEditModalFormWrapper'\n\nconst UserEditModal = () => {\n  useEffect(() => {\n    document.body.classList.add('modal-open')\n    return () => {\n      document.body.classList.remove('modal-open')\n    }\n  }, [])\n\n  return (\n    <>\n      <div\n        className='modal fade show d-block'\n        id='kt_modal_add_user'\n        role='dialog'\n        tabIndex={-1}\n        aria-modal='true'\n      >\n        {/* begin::Modal dialog */}\n        <div className='modal-dialog modal-dialog-centered mw-650px'>\n          {/* begin::Modal content */}\n          <div className='modal-content'>\n            <UserEditModalHeader />\n            {/* begin::Modal body */}\n            <div className='modal-body scroll-y mx-5 mx-xl-15 my-7'>\n              <UserEditModalFormWrapper />\n            </div>\n            {/* end::Modal body */}\n          </div>\n          {/* end::Modal content */}\n        </div>\n        {/* end::Modal dialog */}\n      </div>\n      {/* begin::Modal Backdrop */}\n      <div className='modal-backdrop fade show'></div>\n      {/* end::Modal Backdrop */}\n    </>\n  )\n}\n\nexport {UserEditModal}\n","import {ListViewProvider, useListView} from './core/ListViewProvider'\nimport {QueryRequestProvider} from './core/QueryRequestProvider'\nimport {QueryResponseProvider} from './core/QueryResponseProvider'\nimport {UsersListHeader} from './components/header/UsersListHeader'\nimport {UsersTable} from './table/UsersTable'\nimport {UserEditModal} from './user-edit-modal/UserEditModal'\nimport {KTCard} from '../../../../../_metronic/helpers'\n\nconst UsersList = () => {\n  const {itemIdForUpdate} = useListView()\n  return (\n    <>\n      <KTCard>\n        <UsersListHeader />\n        <UsersTable />\n      </KTCard>\n      {itemIdForUpdate !== undefined && <UserEditModal />}\n    </>\n  )\n}\n\nconst UsersListWrapper = () => (\n  <QueryRequestProvider>\n    <QueryResponseProvider>\n      <ListViewProvider>\n        <UsersList />\n      </ListViewProvider>\n    </QueryResponseProvider>\n  </QueryRequestProvider>\n)\n\nexport {UsersListWrapper}\n","import {Route, Routes, Outlet, Navigate} from 'react-router-dom'\nimport {PageLink, PageTitle} from '../../../../_metronic/layout/core'\nimport {UsersListWrapper} from './users-list/UsersList'\n\nconst usersBreadcrumbs: Array<PageLink> = [\n  {\n    title: 'User Management',\n    path: '/apps/user-management/users',\n    isSeparator: false,\n    isActive: false,\n  },\n  {\n    title: '',\n    path: '',\n    isSeparator: true,\n    isActive: false,\n  },\n]\n\nconst UsersPage = () => {\n  return (\n    <Routes>\n      <Route element={<Outlet />}>\n        <Route\n          path='users'\n          element={\n            <>\n              <PageTitle breadcrumbs={usersBreadcrumbs}>Users list</PageTitle>\n              <UsersListWrapper />\n            </>\n          }\n        />\n      </Route>\n      <Route index element={<Navigate to='/apps/user-management/users' />} />\n    </Routes>\n  )\n}\n\nexport default UsersPage\n"],"names":["API_URL","process","USER_URL","concat","GET_USERS_URL","createUser","user","axios","then","response","data","updateUser","id","QueryRequestContext","createContext","initialQueryRequest","QueryRequestProvider","_ref","children","_useState","useState","_useState2","_slicedToArray","state","setState","_jsx","Provider","value","updateState","updates","updatedState","_objectSpread","useQueryRequest","useContext","QueryResponseContext","createResponseContext","initialQueryResponse","QueryResponseProvider","stringifyRequestQuery","query","setQuery","updatedQuery","useMemo","useEffect","_useQuery","useQuery","QUERIES","d","getUsers","cacheTime","keepPreviousData","refetchOnWindowFocus","isFetching","refetch","isLoading","useQueryResponse","useQueryResponseData","useQueryResponseLoading","ListViewContext","initialListView","ListViewProvider","selected","setSelected","_useState3","_useState4","itemIdForUpdate","setItemIdForUpdate","disabled","calculatedGroupingIsDisabled","isAllSelected","calculateIsAllDataSelected","onSelect","groupingOnSelect","onSelectAll","groupingOnSelectAll","clearSelected","useListView","UsersListFilter","role","setRole","lastLogin","setLastLogin","MenuComponent","_jsxs","_Fragment","type","className","KTIcon","iconName","onChange","e","target","onClick","filter","last_login","initialQueryState","undefined","UsersListToolbar","UsersListGrouping","_useListView","queryClient","useQueryClient","deleteSelectedItems","useMutation","userIds","requests","map","deleteSelectedUsers","onSuccess","invalidateQueries","length","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","mutateAsync","abrupt","sent","stop","UsersListSearchComponent","searchTerm","setSearchTerm","debouncedSearchTerm","useDebounce","search","placeholder","UsersListHeader","CustomHeaderColumn","column","Header","getHeaderProps","render","CustomRow","row","getRowProps","cells","cell","getCellProps","clsx","UserInfoCell","_user$initials","_user$initials2","_user$initials3","href","avatar","src","toAbsoluteUrl","alt","name","initials","label","email","UserLastLoginCell","UserTwoStepsCell","two_steps","UserActionsCell","deleteItem","userId","UserSelectionCell","isSelected","includes","checked","UserCustomHeader","title","tableProps","_useQueryRequest","isSelectedForSorting","sort","order","style","cursor","UserSelectionHeader","usersColumns","props","Cell","Object","assign","_objectDestructuringEmpty","index","_ref2","accessor","_ref3","_ref4","_ref5","UsersListLoading","borderRadius","boxShadow","backgroundColor","color","fontWeight","margin","width","padding","top","left","position","textAlign","mappedLabel","UsersListPagination","_pagination$links2","pagination","defaultPaginationState","links","payload","useQueryResponsePagination","updatePage","page","items_per_page","paginationLinks","_pagination$links","scopedLinks","_toConsumableArray","pageLinks","previousLink","shift","nextLink","pop","halfOfPagesCount","Math","floor","PAGINATION_PAGES_COUNT","push","round","slice","sliceLinks","link","active","previous","_pagination$links3","UsersTable","users","columns","_useTable","useTable","getTableProps","getTableBodyProps","headers","rows","prepareRow","KTCardBody","i","colSpan","UserEditModalHeader","initialUser","editUserSchema","Yup","shape","min","max","required","UserEditModalForm","isUserLoading","userForEdit","cancel","withRefresh","blankImg","userAvatarImg","formik","useFormik","initialValues","validationSchema","onSubmit","_onSubmit","values","setSubmitting","isNotEmpty","t0","console","error","finish","_x","_x2","apply","arguments","handleSubmit","noValidate","backgroundImage","getFieldProps","touched","errors","autoComplete","isSubmitting","htmlFor","isValid","UserEditModalFormWrapper","enabledQuery","enabled","onError","err","UserEditModal","document","body","classList","add","remove","tabIndex","UsersList","KTCard","UsersListWrapper","usersBreadcrumbs","path","isSeparator","isActive","Routes","Route","element","Outlet","PageTitle","breadcrumbs","Navigate","to"],"sourceRoot":""}